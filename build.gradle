/**
 * 构建的配置
 */
buildscript {
    ext {
        kotlinVersion = '1.2.31'
        springBootVersion = '2.0.1.RELEASE'
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    }
}

/**
 * All projects configuration
 */
configure(allprojects) { project ->
    group = "org.asion"
    version = qualifyVersionIfNecessary(version)

    apply plugin: 'idea'
    apply plugin: 'java'
//    apply plugin: 'maven'
    apply plugin: 'groovy'
    apply plugin: 'kotlin'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        springBootVersion = '2.0.1.RELEASE'
        springVersion = '5.0.5.RELEASE'
        springCloudVersion = 'Finchley.RC1'//'Edgware.SR3'
        springBootAdminVersion = '1.5.7'
        platformBomVersion = 'Cairo-RELEASE'
        unitilsBom = '3.4.2'
        assertjVersion = '3.6.2'
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    sourceSets {
        main.kotlin.srcDirs += 'src/main/java'
    }

    // noinspection GroovyAssignabilityCheck
    jar {
        manifest {
            attributes 'Created-By': "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
        }
        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

    idea {
        module {
            //if you hate browsing Javadoc
            downloadJavadoc = false
            //and love reading sources :)
            downloadSources = true
        }
    }
}

/**
 * asion-projects's sub projects configuration
 */
subprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'kotlin'

    dependencyManagement {
        imports {
            mavenBom "org.springframework:spring-framework-bom:${springVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "io.spring.platform:platform-bom:${platformBomVersion}"
        }
    }

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
        compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        // don't include or exclude anything explicitly by default. See SPR-12085.
    }

    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

/**
 * rootProject configuration
 */
configure(rootProject) {
    description = "Asion System"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */
def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}
